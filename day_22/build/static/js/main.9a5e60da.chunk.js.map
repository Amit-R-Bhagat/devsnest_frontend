{"version":3,"sources":["components/Template.jsx","components/Meme.jsx","App.js","reportWebVitals.js","index.js"],"names":["Template","template","setMeme","className","src","url","alt","id","onClick","Meme","meme","useState","template_id","username","password","boxes","form","setForm","Array","box_count","map","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","fetch","then","res","json","body","success","data","App","templates","setTemplates","useEffect","memes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAAe,SAASA,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,SAAWC,EAAU,EAAVA,QAC1C,OACI,qBAAKC,UAAU,WAAf,SACI,qBAAKC,IAAKH,EAASI,IAAKC,IAAKL,EAASM,GAAIC,QAAS,WAC/CN,EAAQD,Q,kBCHT,SAASQ,EAAT,GAAkC,IAAlBC,EAAiB,EAAjBA,KAAMR,EAAW,EAAXA,QACjC,EAAwBS,mBAAS,CAC7BC,YAAaF,EAAKH,GAClBM,SAAU,SACVC,SAAU,cACVC,MAAO,KAJX,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OACI,sBAAKd,UAAU,OAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qBAAKC,IAAKM,EAAKL,IAAKC,IAAKI,EAAKH,OAGlC,8BAEQ,YAAIW,MAAMR,EAAKS,YAAYC,KAAI,SAACC,EAAGC,GAAJ,OAC3B,uBAAmBC,KAAK,OAAOC,YAAW,uBAAkBF,EAAQ,GAAKG,SAAU,SAACC,GAChF,IAAMC,EAAWX,EAAKD,MACtBY,EAASL,GAAS,CAAEM,KAAMF,EAAEG,OAAOC,OACnCb,EAAQ,2BAAKD,GAAN,IAAYD,MAAOY,OAHlBL,QAQxB,gCACI,wBAAQd,QAAS,WACb,IAAIH,EAAG,4DAAwDW,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMK,KAAI,SAACW,EAAKT,GAAN,OACXjB,GAAG,iBAAciB,EAAd,mBAA8BS,EAAIH,SAGzCI,MAAM3B,GACL4B,MAAK,SAACC,GAAD,OAAQA,EAAIC,UACjBF,MAAK,SAACG,GACCA,EAAKC,SACLnC,EAAQ,2BAAIQ,GAAL,IAAWL,IAAK+B,EAAKE,KAAKjC,WAV7C,sBAgBA,wBAAQG,QAAS,WACbN,EAAQ,OADZ,4B,MChBDqC,MArBf,WACE,MAAkC5B,mBAAS,IAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KACA,EAAqB9B,mBAAS,MAA9B,mBAAKD,EAAL,KAAUR,EAAV,KAMA,OALAwC,qBAAU,WACRV,MAAM,qCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIK,EAAaL,EAAKE,KAAKK,YACrC,IAEA,sBAAKxC,UAAU,MAAf,UACE,gDACU,OAATO,EACC8B,EAAUpB,KAAI,SAACnB,GAAD,OACZ,cAACD,EAAD,CAA4BC,SAAUA,EAAUC,QAASA,GAA1CD,EAASM,OAExB,cAACE,EAAD,CAAMC,KAAMA,EAAMR,QAASA,QCRtB0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9a5e60da.chunk.js","sourcesContent":["export default function Template({ template , setMeme}) {\r\n    return (\r\n        <div className=\"template\">\r\n            <img src={template.url} alt={template.id} onClick={()=>{\r\n                setMeme(template);\r\n            }}></img>\r\n\r\n        </div>\r\n    )\r\n}","import { useState } from \"react\";\r\nexport default function Meme({ meme, setMeme }) {\r\n    const [form, setForm] = useState({\r\n        template_id: meme.id,\r\n        username: \"abcd11\",\r\n        password: \"password@11\",\r\n        boxes: [],\r\n    })\r\n    return (\r\n        <div className=\"meme\">\r\n            <div className=\"template\">\r\n                <img src={meme.url} alt={meme.id}></img>\r\n            </div>\r\n\r\n            <div>\r\n                {\r\n                    [...Array(meme.box_count)].map((_, index) => (\r\n                        <input key={index} type=\"text\" placeholder={`Meme Caption ${index + 1}`} onChange={(e) => {\r\n                            const newBoxes = form.boxes;\r\n                            newBoxes[index] = { text: e.target.value };\r\n                            setForm({ ...form, boxes: newBoxes })\r\n                        }}></input>\r\n                    ))\r\n                }\r\n            </div>\r\n            <div>\r\n                <button onClick={() => {\r\n                    let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`\r\n                    form.boxes.map((box, index) => (\r\n                        url += `&boxes[${index}][text]=${box.text}`\r\n                    ));\r\n\r\n                    fetch(url)\r\n                    .then((res)=> res.json())\r\n                    .then((body)=> {\r\n                        if (body.success){\r\n                            setMeme({...meme, url: body.data.url})\r\n\r\n                        }\r\n                    });\r\n\r\n                }}>Generate</button>\r\n                <button onClick={() => {\r\n                    setMeme(null);\r\n                }}>Template</button>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}","import {useState, useEffect} from 'react';\nimport Template from './components/Template';\nimport Meme from './components/Meme';\nimport './App.css';\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  let [meme,setMeme] = useState(null);\n  useEffect(()=>{\n    fetch(\"https://api.imgflip.com/get_memes\")\n    .then(res => res.json())\n    .then(body => setTemplates(body.data.memes));\n  },[])\n  return (\n    <div className=\"App\">\n      <h1>Meme Generator</h1>\n      {meme === null ? (\n        templates.map((template) => (\n          <Template key={template.id} template={template} setMeme={setMeme} />\n        ))\n      ) : <Meme meme={meme} setMeme={setMeme}/>}\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}