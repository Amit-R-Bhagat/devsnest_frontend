{"version":3,"sources":["App.js","useArray.js","index.js"],"names":["App","todos","initial","useState","values","setValues","add","useCallback","item","newValues","delete","id","splice","clear","useArray","setItem","className","value","onChange","e","target","console","log","onClick","map","todo","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NA2BeA,MAxBf,WACE,IAAMC,ECFD,SAAkBC,GACrB,MAA2BC,mBAASD,GAApC,mBAAOE,EAAP,KAAcC,EAAd,KACA,MAAM,CACFD,SACAE,IAAKC,uBAAY,SAACC,GACd,IAAMC,EAAS,sBAAOL,GAAP,CAAcI,IAC7BH,EAAUI,MAEdC,OAAQH,uBAAY,SAACI,GACjB,IAAMF,EAAS,YAAOL,GACtBK,EAAUG,OAAOD,EAAG,GACpBN,EAAUI,MAEdI,MAAON,uBAAY,WACfF,EAAU,QDZNS,CAAS,CAAC,WAAW,gBACnC,EAAuBX,mBAAS,MAAhC,mBAAOK,EAAP,KAAYO,EAAZ,KACA,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOC,MAAST,EAAMU,SAAU,SAACC,GAAKJ,EAAQI,EAAEC,OAAOH,OAAQI,QAAQC,IAAId,MAC3E,wBAAQe,QAAS,SAACJ,GAChBlB,EAAMK,IAAIE,GACVO,EAAQ,KAFV,iBAIA,6BAEEd,EAAMG,OAAOoB,KAAI,SAACC,EAAKC,GACpB,OACA,+BAAiBD,EAAjB,IAAuB,wBAAQF,QAAS,WAAKtB,EAAMS,OAAOgB,IAAnC,sBAAdA,QAKd,wBAAQH,QAAS,WAAKtB,EAAMY,SAA5B,uBEjBNc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5ec7d225.chunk.js","sourcesContent":["import './App.css';\nimport {useArray} from './useArray'\nimport {useState} from 'react'\nfunction App() {\n  const todos = useArray([\"buy milk\",\"buy coffeee\"]);\n  const [item,setItem] = useState(null);\n  return (\n    <div className=\"App\">\n      <input value = {item} onChange={(e)=>{setItem(e.target.value); console.log(item);}}></input>\n      <button onClick={(e)=>{\n        todos.add(item);\n        setItem(\"\")\n      }}>Add</button>\n      <ul>\n      {\n        todos.values.map((todo,index) => {\n           return (\n           <li key={index}>{todo} <button onClick={()=>{todos.delete(index)}}>delete</button></li>\n           )\n        })\n      }\n      </ul>\n      <button onClick={()=>{todos.clear()}}>Clear</button>\n    </div>\n  );\n}\n\nexport default App;\n","import {useState, useCallback} from 'react';\r\n\r\nexport function useArray(initial){\r\n    const [values,setValues] = useState(initial);\r\n    return{\r\n        values,\r\n        add: useCallback((item)=>{\r\n            const newValues = [...values,item];\r\n            setValues(newValues);\r\n        }),\r\n        delete: useCallback((id) =>{\r\n            const newValues = [...values];\r\n            newValues.splice(id,1);\r\n            setValues(newValues);\r\n        }),\r\n        clear: useCallback(()=>{\r\n            setValues([]);\r\n        })\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}